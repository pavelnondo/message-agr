

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "0.0.0.0:8090:8080"
      - "0.0.0.0:5679:5679"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - app_network

  backend:
    container_name: backend
    build:
      context: ./backend
    depends_on:
      - db
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - app_network

  frontend:
    container_name: frontend
    build:
      context: ./frontend
    ports:
      - "0.0.0.0:5173:8080"
    networks:
      - app_network

  cloud:
    image: minio/minio
    container_name: cloud
    ports:
      - "0.0.0.0:9000:9000"
      - "0.0.0.0:9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_LOGIN}
      MINIO_ROOT_PASSWORD: ${MINIO_PWD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app_network

  db:
    image: postgres:15
    restart: always
    ports:
      - "5433:5432"
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app_network

volumes:
  minio_data:
  pgdata:
  redis_data:
  rabbitmq_data:

networks:
  app_network:
    driver: bridge